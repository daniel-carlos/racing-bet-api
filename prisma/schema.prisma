// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  username  String   @unique
  money     Float    @default(0)
  name      String
  Bet       Bet[]
}

model Driver {
  id         Int          @id @default(autoincrement())
  name       String
  RaceDriver RaceDriver[]
  modelURL   String?
}

model Car {
  id           Int          @id @default(autoincrement())
  name         String
  prefabName   String       @default("")
  RaceDriver   RaceDriver[]
  speed        Float
  acceleration Float
  steering     Float
}

enum RaceFinalStatus {
  WAITING
  FINISHED // O drivero completou a corrida da maneira tradicional.
  RETIREMENT_CAR_FAILURE // O drivero n√£o completou a corrida devido a um problema com o carro.
  RETIREMENT_TIME_LIMIT // O drivero foi eliminado da corrida por tempo limite.
  CANCELED
}

model RaceDriver {
  id        Int    @id @default(autoincrement())
  gridPlace Int    @default(1)
  driver    Driver @relation(fields: [driverId], references: [id])
  driverId  Int
  race      Race   @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId    Int
  Bet       Bet[]
  car       Car    @relation(fields: [carId], references: [id])
  carId     Int

  finalStatus RaceFinalStatus @default(WAITING)
  finalTime   Float?
  finalPlace  Int?
}

model Race {
  id         Int          @id @default(autoincrement())
  Bet        Bet[]
  RaceDriver RaceDriver[]
  date       String
  raceTime   Int          @default(180)
  laps       Int          @default(3)
}

model Bet {
  id       Int  @id @default(autoincrement())
  race     Race @relation(fields: [raceId], references: [id])
  raceId   Int
  position Int

  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  raceDriver   RaceDriver @relation(fields: [raceDriverId], references: [id])
  raceDriverId Int

  value Float @default(0)
}
